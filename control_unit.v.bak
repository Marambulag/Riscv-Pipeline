module control_unit (
    input wire [6:0] opcode,       // Instruction opcode
    input wire [2:0] funct3,       // funct3 field
    input wire [6:0] funct7,       // funct7 field
    output reg RegWrite,           // Register write enable
    output reg MemRead,            // Memory read enable
    output reg MemWrite,           // Memory write enable
    output reg [1:0] ALUOp,        // ALU operation type
    output reg ALUSrc,             // ALU source select (0=reg, 1=imm)
    output reg Branch,             // Branch instruction
    output reg Jump,               // Jump instruction
    output reg [1:0] ResultSrc,    // Result source (ALU, Mem, PC+4)
    output reg [2:0] ImmSel        // Immediate format selector
);

always @(*) begin
    // Default values
    RegWrite = 1'b0;
    MemRead = 1'b0;
    MemWrite = 1'b0;
    ALUOp = 2'b00;
    ALUSrc = 1'b0;
    Branch = 1'b0;
    Jump = 1'b0;
    ResultSrc = 2'b00;
    ImmSel = 3'b000;

    case (opcode)
        // R-type instructions (ADD, SUB, etc.)
        7'b0110011: begin
            RegWrite = 1'b1;
            ALUOp = 2'b10;  // Use funct3/funct7
        end
        
        // I-type instructions (ADDI, LW, etc.)
        7'b0010011: begin
            RegWrite = 1'b1;
            ALUSrc = 1'b1;
            ALUOp = 2'b10;
            ImmSel = 3'b000; // I-type immediate
        end
        
        // Load instructions (LW)
        7'b0000011: begin
            RegWrite = 1'b1;
            ALUSrc = 1'b1;
            MemRead = 1'b1;
            ResultSrc = 2'b01; // Memory read result
            ImmSel = 3'b000;   // I-type immediate
        end
        
        // S-type instructions (SW)
        7'b0100011: begin
            MemWrite = 1'b1;
            ALUSrc = 1'b1;
            ImmSel = 3'b001;   // S-type immediate
        end
        
        // B-type instructions (BEQ, BNE)
        7'b1100011: begin
            Branch = 1'b1;
            ALUOp = 2'b01;     // Compare
            ImmSel = 3'b010;   // B-type immediate
        end
        
        // JAL
        7'b1101111: begin
            RegWrite = 1'b1;
            Jump = 1'b1;
            ResultSrc = 2'b10; // PC+4
            ImmSel = 3'b011;   // J-type immediate
        end
        
        // JALR
        7'b1100111: begin
            RegWrite = 1'b1;
            Jump = 1'b1;
            ALUSrc = 1'b1;
            ResultSrc = 2'b10; // PC+4
            ImmSel = 3'b000;   // I-type immediate
        end
        
        // LUI
        7'b0110111: begin
            RegWrite = 1'b1;
            ResultSrc = 2'b11; // Immediate
            ImmSel = 3'b100;   // U-type immediate
        end
        
        // AUIPC
        7'b0010111: begin
            RegWrite = 1'b1;
            ALUSrc = 1'b1;
            ALUOp = 2'b00;     // ADD
            ResultSrc = 2'b00; // ALU result
            ImmSel = 3'b100;   // U-type immediate
        end
    endcase
end
endmodule