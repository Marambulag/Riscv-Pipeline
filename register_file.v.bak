module register_file (
    input wire clk,
    input wire reset,
    input wire [4:0] rs1,        // Source register 1
    input wire [4:0] rs2,        // Source register 2
    input wire [4:0] rd,         // Destination register
    input wire [31:0] wdata,     // Write data
    input wire RegWrite,         // Write enable
    output wire [31:0] rdata1,   // Read data 1
    output wire [31:0] rdata2    // Read data 2
);

reg [31:0] registers [0:31];

// Initialize all registers to 0 on reset
integer i;
always @(posedge clk or posedge reset) begin
    if (reset) begin
        for (i = 0; i < 32; i = i + 1)
            registers[i] <= 32'b0;
    end
    else if (RegWrite && rd != 0) begin
        registers[rd] <= wdata;  // x0 is hardwired to 0
    end
end

// Read ports (asynchronous)
assign rdata1 = (rs1 == 0) ? 32'b0 : registers[rs1];
assign rdata2 = (rs2 == 0) ? 32'b0 : registers[rs2];

endmodule