module ex_mem_register (
    input logic clk,
    input logic reset,

    // Inputs from EX stage
    input logic [31:0] pc_plus_4_in,
    input logic [31:0] alu_result_in,
    input logic [31:0] rdata2_in, // For SW instruction
    input logic [4:0] rd_in,      // Destination register address
    input logic [1:0] mem_write_in, // Control signal for Data Memory write
    input logic mem_read_in,    // Control signal for Data Memory read
    input logic reg_write_in,   // Control signal for Register File write
    input logic [1:0] result_src_in, // Control signal for Write-Back MUX

    // Outputs to MEM stage
    output logic [31:0] pc_plus_4_out,
    output logic [31:0] alu_result_out,
    output logic [31:0] rdata2_out,
    output logic [4:0] rd_out,
    output logic [1:0] mem_write_out,
    output logic mem_read_out,
    output logic reg_write_out,
    output logic [1:0] result_src_out
);

always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        pc_plus_4_out <= 32'b0;
        alu_result_out <= 32'b0;
        rdata2_out <= 32'b0;
        rd_out <= 5'b0;
        mem_write_out <= 2'b0;
        mem_read_out <= 1'b0;
        reg_write_out <= 1'b0;
        result_src_out <= 2'b0;
    end else begin
        pc_plus_4_out <= pc_plus_4_in;
        alu_result_out <= alu_result_in;
        rdata2_out <= rdata2_in;
        rd_out <= rd_in;
        mem_write_out <= mem_write_in;
        mem_read_out <= mem_read_in;
        reg_write_out <= reg_write_in;
        result_src_out <= result_src_in;
    end
end

endmodule